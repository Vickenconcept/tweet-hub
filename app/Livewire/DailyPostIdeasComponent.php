<?php

namespace App\Livewire;

use Livewire\Component;
use App\Services\ChatGptService;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Livewire\Attributes\On;

class DailyPostIdeasComponent extends Component
{
    public $ideas = [];
    public $loading = false;
    public $errorMessage = '';
    public $successMessage = '';
    public $selectedIdea = '';
    public $topic = '';
    public $niche = '';
    public $activeTab = 'generate';
    public $currentPage = 1;
    public $perPage = 10;
    public $favorites = [];
    public $autoGenerated = false;
    public $showPreferences = false;
    public $hasCachedIdeas = false;

    protected $chatGptService;

    public function boot(ChatGptService $chatGptService)
    {
        $this->chatGptService = $chatGptService;
    }

    public function mount()
    {
        $this->loadFavorites();
        $this->loadUserPreferences();
        
        // Show preferences panel if user hasn't set them yet
        if (empty($this->topic) || empty($this->niche)) {
            $this->showPreferences = true;
        }
        
        $this->checkDailyIdeas();
    }

    public function loadUserPreferences()
    {
        $user = Auth::user();
        if ($user) {
            $this->topic = $user->getDefaultTopic();
            $this->niche = $user->getDefaultNiche();
        }
    }

    public function checkDailyIdeas()
    {
        $user = Auth::user();
        if (!$user) {
            return;
        }

        $cacheKey = "daily_ideas_{$user->id}_" . now()->format('Y-m-d');
        $cachedIdeas = Cache::get($cacheKey);

        if ($cachedIdeas) {
            $this->ideas = $cachedIdeas;
            $this->hasCachedIdeas = true;
            $this->autoGenerated = false; // Not auto-generated, loaded from cache
            $this->successMessage = 'Daily ideas loaded from cache for today!';
        } else {
            $this->hasCachedIdeas = false;
            // Set auto-generated flag immediately to show loading state
            $this->autoGenerated = true;
            $this->ideas = []; // Clear any existing ideas
            // Auto-generate ideas after page loads if user has preferences set
            if (!empty($this->topic) && !empty($this->niche)) {
                $this->dispatch('auto-generate-ideas');
            }
        }
    }

    public function autoGenerateIdeas()
    {
        if (empty($this->topic) || empty($this->niche)) {
            $this->loadUserPreferences();
        }

        // Ensure loading state is visible
        $this->autoGenerated = true;
        $this->ideas = []; // Clear any existing ideas
        
        // Add a small delay to ensure loading state is visible
        usleep(500000); // 0.5 second delay
        
        $this->generateIdeas(true);
    }

    // Alternative method name for JavaScript compatibility
    public function triggerAutoGenerate()
    {
        return $this->autoGenerateIdeas();
    }

    #[On('auto-generate-ideas')]
    public function handleAutoGenerateEvent()
    {
        $this->autoGenerateIdeas();
    }

    public function generateIdeas($isAutoGenerate = false)
    {
        if (!$isAutoGenerate) {
            $this->validate([
                'topic' => 'required|min:3|max:100',
                'niche' => 'required|min:3|max:100',
            ]);
        }

        // Set loading state immediately
        $this->loading = true;
        $this->errorMessage = '';
        $this->successMessage = '';
        
        // Clear existing ideas to show loading state
        $this->ideas = [];
        $this->autoGenerated = true;
        
        // Force a re-render to show loading state
        $this->dispatch('$refresh');
        
        // Add a small delay to ensure loading state is visible
        usleep(300000); // 0.3 second delay

        try {
            $prompt = "Generate 12 complete, ready-to-post daily posts for a {$this->niche} account about {$this->topic}. 
                      Each post should be:
                      - A complete, human-written post that someone would actually post on social media
                      - Engaging, conversational, and authentic in tone
                      - Include relevant hashtags naturally within the content
                      - Be between 150-250 words
                      - Have a compelling hook and clear value for the audience
                      - Feel like it was written by a real person, not an AI
                      
                      Write these as actual posts someone would publish, not outlines or ideas.
                      Format as a numbered list with complete posts.";

            $response = $this->chatGptService->generateContent($prompt);
            
            if ($response) {
                $this->ideas = $this->parseIdeas($response);
                
                // Cache the ideas for today
                $user = Auth::user();
                if ($user) {
                    $cacheKey = "daily_ideas_{$user->id}_" . now()->format('Y-m-d');
                    Cache::put($cacheKey, $this->ideas, now()->addDay());
                    
                    // Update user preferences if they changed
                    if ($this->topic !== $user->getDefaultTopic() || $this->niche !== $user->getDefaultNiche()) {
                        $user->updateDailyIdeasPreferences($this->topic, $this->niche);
                    }
                    
                    // Mark as generated for today
                    $user->markDailyIdeasGenerated();
                }
                
                if ($isAutoGenerate) {
                    $this->autoGenerated = true;
                    $this->successMessage = 'Daily ideas auto-generated successfully! Count: ' . count($this->ideas);
                } else {
                    $this->successMessage = 'Daily post ideas generated successfully! Count: ' . count($this->ideas);
                }
            } else {
                $this->errorMessage = 'Failed to generate ideas. Please try again.';
            }
        } catch (\Exception $e) {
            $this->errorMessage = 'Error generating ideas: ' . $e->getMessage();
        }

        $this->loading = false;
    }

    private function parseIdeas($response)
    {
        $lines = explode("\n", $response);
        $ideas = [];
        $currentIdea = '';
        $ideaNumber = 0;
        $inIdea = false;
        
        foreach ($lines as $line) {
            $line = trim($line);
            
            // Check if this is a new numbered post (**1.**, **2.**, etc.)
            if (preg_match('/^\*\*\d+\.\*\*\s*$/', $line)) {
                // Save the previous idea if we have one
                if (!empty($currentIdea) && $ideaNumber > 0) {
                    $ideas[] = trim($currentIdea);
                }
                
                // Start new idea
                $currentIdea = '';
                $ideaNumber++;
                $inIdea = true;
            }
            // Also check for regular numbered format (1. or ### 1.)
            else if (preg_match('/^(?:###\s*)?\d+\.\s*(.+)$/', $line, $matches)) {
                // Save the previous idea if we have one
                if (!empty($currentIdea) && $ideaNumber > 0) {
                    $ideas[] = trim($currentIdea);
                }
                
                // Start new idea
                $currentIdea = $matches[1];
                $ideaNumber++;
                $inIdea = true;
            }
            // Continue building the current idea (any non-empty line that's not a new numbered item)
            else if (!empty($line) && $inIdea && 
                     !preg_match('/^(?:###\s*)?\d+\./', $line) && 
                     !preg_match('/^\*\*\d+\.\*\*/', $line) &&
                     !preg_match('/^---$/', $line) &&
                     !preg_match('/^Sure! Here are/', $line) &&
                     !preg_match('/^Feel free to adjust/', $line)) {
                $currentIdea .= "\n" . $line;
            }
        }
        
        // Add the last idea
        if (!empty($currentIdea) && $ideaNumber > 0) {
            $ideas[] = trim($currentIdea);
        }
        
        return array_slice($ideas, 0, 12); // Ensure max 12 ideas
    }

    public function selectIdea($index)
    {
        if (isset($this->ideas[$index])) {
            $this->selectedIdea = $this->ideas[$index];
            $this->dispatch('idea-selected', idea: $this->selectedIdea);
        }
    }

    public function editInChat($index)
    {
        // Calculate the actual index in the full ideas array
        $actualIndex = ($this->currentPage - 1) * $this->perPage + $index;
        
        if (isset($this->ideas[$actualIndex])) {
            $idea = $this->ideas[$actualIndex];
            $this->dispatch('edit-idea-in-chat', idea: $idea);
            $this->dispatch('open-chat'); // Dispatch event to open chat
            $this->successMessage = 'Idea sent to chat for editing!';
        }
    }

    public function updatePreferences()
    {
        $this->validate([
            'topic' => 'required|min:3|max:100',
            'niche' => 'required|min:3|max:100',
        ]);

        $user = Auth::user();
        if ($user) {
            $user->updateDailyIdeasPreferences($this->topic, $this->niche);
            $this->successMessage = 'Preferences updated successfully!';
            
            // Hide preferences panel
            $this->showPreferences = false;
            
            // Clear any existing cached ideas for today
            $cacheKey = "daily_ideas_{$user->id}_" . now()->format('Y-m-d');
            Cache::forget($cacheKey);
            
            // Auto-generate new ideas with updated preferences
            $this->generateIdeas(true);
        }
    }

    public function togglePreferences()
    {
        $this->showPreferences = !$this->showPreferences;
    }

    public function clearIdeas()
    {
        $this->ideas = [];
        $this->selectedIdea = '';
        $this->errorMessage = '';
        $this->successMessage = '';
        $this->autoGenerated = false;
        $this->hasCachedIdeas = false;
        
        // Clear cache for today
        $user = Auth::user();
        if ($user) {
            $cacheKey = "daily_ideas_{$user->id}_" . now()->format('Y-m-d');
            Cache::forget($cacheKey);
        }
    }

         public function setTab($tab)
     {
         $this->activeTab = $tab;
         $this->currentPage = 1;
         
         if ($tab === 'favorites') {
             $this->dispatch('render-favorites');
         }
     }

    public function loadFavorites()
    {
        $this->favorites = [];
        if (request()->hasHeader('X-Livewire')) {
            // This will be handled by JavaScript
            return;
        }
    }

    public function toggleFavorite($index)
    {
        // Calculate the actual index in the full ideas array
        $actualIndex = ($this->currentPage - 1) * $this->perPage + $index;
        
        if (isset($this->ideas[$actualIndex])) {
            $idea = $this->ideas[$actualIndex];
            $ideaId = md5($idea); // Create unique ID for the idea
            
            $this->dispatch('toggle-favorite', [
                'idea' => $idea,
                'ideaId' => $ideaId,
                'action' => 'toggle'
            ]);
            
            $this->successMessage = 'Favorite status updated!';
        }
    }

    public function removeFavorite($ideaId)
    {
        $this->dispatch('remove-favorite', [
            'ideaId' => $ideaId
        ]);
        
        $this->successMessage = 'Idea removed from favorites!';
    }

    public function nextPage()
    {
        $totalPages = ceil(count($this->ideas) / $this->perPage);
        if ($this->currentPage < $totalPages) {
            $this->currentPage++;
        }
    }

    public function previousPage()
    {
        if ($this->currentPage > 1) {
            $this->currentPage--;
        }
    }

    public function getPaginatedIdeas()
    {
        $start = ($this->currentPage - 1) * $this->perPage;
        return array_slice($this->ideas, $start, $this->perPage);
    }

    public function getGenerateButtonText()
    {
        if ($this->hasCachedIdeas || count($this->ideas) > 0) {
            return 'Regenerate New Ideas';
        }
        return 'Generate Ideas';
    }

    public function render()
    {
        $totalIdeas = count($this->ideas);
        
        return view('livewire.daily-post-ideas-component', [
            'totalIdeas' => $totalIdeas,
        ]);
    }
} 